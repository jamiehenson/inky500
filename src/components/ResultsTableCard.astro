---
import { Image } from "astro:assets";
import { drivers, pointsPenalties, seasonRacers } from "@/data";
import {
  type RacerName,
  type ConstructorName,
  type SeasonName,
  type TrackName,
} from "@/types";
import { carImages } from "@/utils";
import { pointsScheme } from "@/points";
import TableCard from "./TableCard.astro";
import Badge from "./ui/Badge.astro";
import type { RacerResult } from "@/data/results";
import TableCell from "./ui/table/TableCell.astro";
import TableRow from "./ui/table/TableRow.astro";
import type { Penalties } from "@/data/penalties";
import { cn } from "@/lib/utils";

type Props = {
  data: RacerResult;
  title: string;
  season: SeasonName;
  track: TrackName;
  className: string;
  link?: string;
};

const { data, title, season, track, className, link } = Astro.props;
---

<TableCard title={title} className={className} link={link}>
  {
    Object.entries(data.results ?? {}).map((result, index) => {
      const racer = result[0] as RacerName;
      const seasonDriver = seasonRacers[season][racer];
      const driver = drivers[racer];
      const hasFastestLap = data.fastestLap?.racerId === result[0];

      if (driver && seasonDriver) {
        const pointsDeducted =
          (pointsPenalties as Penalties)[season][track]?.[racer] ?? 0;

        const pointsAdded = ["DNF", "DSQ", "-"].includes(result[1])
          ? 0
          : Number(pointsScheme[season][index] ?? "0") +
            (hasFastestLap ? 1 : 0) -
            pointsDeducted;

        const currentTeam = seasonDriver.otherTeams?.[track] ?? seasonDriver;

        return (
          <TableRow>
            <TableCell className="flex items-center">
              <Badge className="hidden sm:inline-flex mr-2 pointer-events-none">
                {index + 1}
              </Badge>
              <span
                class={`!hidden sm:!inline-flex rounded-sm mr-1 fi fi-${driver.countryCode}`}
              />
              {driver.name}
            </TableCell>
            <TableCell>
              <div class="flex items-center gap-2">
                <Image
                  src={carImages[currentTeam.car as ConstructorName]}
                  alt={currentTeam.car}
                  class="w-6 h-6"
                />
                <span>{currentTeam.team}</span>
              </div>
            </TableCell>
            <TableCell className="font-bold flex items-end sm:items-center justify-end flex-col sm:flex-row">
              <div>
                <span>
                  {[".", "lap"].some(
                    (el) => result[1].toString().includes(el) && index !== 0
                  )
                    ? "+"
                    : ""}
                </span>
                <span class="mr-1 sm:mr-0">{result[1]}</span>
              </div>
              <Badge
                className={cn(
                  "ml-2 my-1 sm:my-0",
                  { "bg-blue-100 dark:bg-blue-950": hasFastestLap },
                  { "bg-red-100 dark:bg-red-950": pointsDeducted }
                )}
                variant="outline"
              >
                +{pointsAdded}
                {pointsDeducted ? ` (-${pointsDeducted})` : null}
              </Badge>
            </TableCell>
          </TableRow>
        );
      }
    })
  }
  {
    data.fastestLap ? (
      <TableRow>
        <TableCell className="bg-blue-100 dark:bg-blue-950 font-bold rounded-bl-lg">
          <span class="font-bold">Fastest lap</span>
        </TableCell>
        <TableCell className="bg-blue-100 dark:bg-blue-950 font-bold">
          {drivers[data.fastestLap.racerId].name}
        </TableCell>
        <TableCell className="bg-blue-100 dark:bg-blue-950 text-right font-bold rounded-br-lg">
          {data.fastestLap.time}
        </TableCell>
      </TableRow>
    ) : null
  }
</TableCard>
