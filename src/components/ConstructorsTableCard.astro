---
import { Image } from "astro:assets";
import { seasonRacers, drivers, constructors, results } from "@/data";
import {
  type ConstructorName,
  type RacerName,
  type SeasonName,
  type TrackName,
} from "@/types";
import { carImages } from "@/utils";
import DeltaMarker from "./DeltaMarker.astro";
import TableCard from "./TableCard.astro";
import type { ConstructorResults } from "@/data/constructorsStandings";
import TableCell from "./ui/table/TableCell.astro";
import TableRow from "./ui/table/TableRow.astro";
import Badge from "./ui/Badge.astro";

type Props = {
  season: SeasonName;
  track: TrackName;
  data: ConstructorResults;
  trackResults: Record<string, string>;
};

const { season, track, data, trackResults } = Astro.props;
---

<TableCard title="Constructors' Standings" className="col-span-2 lg:col-span-1">
  {
    Object.entries(data).map((result, index) => {
      const constructor = constructors[result[0] as ConstructorName];
      const constructorDrivers = Object.entries(seasonRacers[season])
        .filter((racer) =>
          racer[1].otherTeams?.[track]
            ? racer[1].otherTeams[track].car === result[0]
            : racer[1].car === result[0]
        )
        .map((racer) => [racer[0], drivers[racer[0] as RacerName].name])
        .toSorted((a, b) => a[1].localeCompare(b[1]));

      if (constructor && constructorDrivers.length > 0) {
        return (
          <TableRow>
            {typeof result[1] !== "string" ? (
              <TableCell>
                <div class="flex items-center">
                  <Badge className="w-8 justify-center mr-2 pointer-events-none">
                    {index + 1}
                  </Badge>
                  <DeltaMarker delta={result[1].delta} />
                </div>
              </TableCell>
            ) : null}
            <TableCell className="flex items-center gap-2">
              <Image
                src={carImages[result[0] as ConstructorName]}
                alt={result[0]}
                class="w-6 h-6"
              />
              {constructor.name}
            </TableCell>
            <TableCell>
              {constructorDrivers.map((driver) => (
                <p
                  class={
                    Object.keys(trackResults ?? {}).includes(driver[0])
                      ? ""
                      : "font-extralight text-zinc-400"
                  }
                >
                  {driver[1]}
                </p>
              ))}
            </TableCell>
            <TableCell className="font-bold text-right">
              <span class="font-bold">{result[1].normalisedPoints}</span>{" "}
              {Object.keys(results).indexOf(track) >=
                Object.keys(results).length - 3 &&
              result[1].netNormalisedPoints ? (
                <span class="font-light text-xs">
                  ({result[1].netNormalisedPoints})
                </span>
              ) : null}
            </TableCell>
          </TableRow>
        );
      }
    })
  }
</TableCard>
