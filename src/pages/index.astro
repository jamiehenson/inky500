---
import ConstructorCard from "../components/ConstructorCard.astro";
import Layout from "../layouts/Layout.astro";
import type { ConstructorName, RacerName, SeasonName } from "@/types";
import { Image } from "astro:assets";
import type { Status } from "@/components/StatusBadge.astro";
import StatusBadge from "@/components/StatusBadge.astro";
import { carImages } from "@/utils";
import { drivers, seasonRacers, standings } from "@/data";

interface SeasonInfo {
  game: string;
  key: SeasonName;
  status: Status;
  subtitle: string;
}

const seasonCars = (season: SeasonName) =>
  Array.from(
    new Set(
      Object.values(seasonRacers[season]).flatMap((racer) => [
        racer.car,
        ...(racer.otherTeams
          ? Object.values(racer.otherTeams).map((team) => team.car)
          : []),
      ])
    )
  ).toSorted();

const getSeasonWinners = (season: SeasonName): RacerName[] =>
  (
    Object.keys(
      Object.values(standings[season])[
        Object.keys(standings[season]).length - 1
      ]
    ) as RacerName[]
  ).slice(0, 3);

export const seasonInfo: SeasonInfo[] = [
  {
    key: "s1",
    subtitle: "Ginetta Juniors",
    game: "Project Cars 2",
    status: "complete",
  },
  {
    key: "s2",
    subtitle: "Touring Cars",
    game: "Project Cars 2",
    status: "complete",
  },
  {
    key: "s3",
    subtitle: "TCX",
    game: "ACC",
    status: "complete",
  },
  {
    key: "s4",
    subtitle: "GT4",
    game: "ACC",
    status: "complete",
  },
  {
    key: "s5",
    subtitle: "GT3",
    game: "ACC",
    status: "in-progress",
  },
];
---

<Layout
  title="Inky 500 | Seasons"
  description={`View the results and standings for all Inky 500 seasons 🏆`}
>
  <main>
    <h1>Seasons</h1>
    <div class="grid sm:grid-cols-2 gap-3">
      {
        seasonInfo.map((season) => (
          <ConstructorCard
            title={`Season ${season.key.slice(1)}`}
            subtitle={`${season.subtitle} - ${Object.keys(standings[season.key]).filter((race) => race).length} races`}
            link={`/${season.key}`}
            car={
              season.status === "complete"
                ? (seasonRacers[season.key]?.[getSeasonWinners(season.key)[0]]
                    ?.car ?? "unknown")
                : "unknown"
            }
          >
            <div class="flex items-center gap-2 flex-wrap -mt-4 mb-4">
              {seasonCars(season.key).map((car: string) => (
                <Image
                  src={carImages[car as ConstructorName]}
                  alt={car}
                  class="w-6 h-6"
                  loading="eager"
                />
              ))}
            </div>
            <div class="flex flex-col gap-2 mb-6">
              {season.status === "complete"
                ? getSeasonWinners(season.key as SeasonName).map(
                    (winner, index) => (
                      <p class="flex justify-between gap-2">
                        <span class="flex items-center gap-1">
                          {index === 0 ? "🥇" : index === 1 ? "🥈" : "🥉"}
                          {drivers[winner].name}
                        </span>
                        <span class="flex items-center gap-2 text-xs">
                          {seasonRacers[season.key as SeasonName][winner]?.team}
                          <Image
                            src={
                              carImages[
                                seasonRacers[season.key as SeasonName][winner]
                                  ?.car as ConstructorName
                              ]
                            }
                            alt={
                              seasonRacers[season.key as SeasonName][winner]
                                ?.car ?? "unknown"
                            }
                            class="w-6 h-6 inline-block"
                            loading="eager"
                          />
                        </span>
                      </p>
                    )
                  )
                : null}
            </div>
            <StatusBadge status={season.status} />
          </ConstructorCard>
        ))
      }
    </div>
  </main>
</Layout>
