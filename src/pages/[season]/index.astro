---
import ConstructorCard from "../../components/ConstructorCard.astro";
import Layout from "../../layouts/Layout.astro";
import type {
  ConstructorName,
  RacerName,
  SeasonName,
  TrackName,
} from "../../types";
import * as Icon from "@astropub/icons";
import { seasonRacers, drivers, tracks, results } from "@/data";
import { carImages, withBase } from "@/utils";
import StatusBadge from "@/components/StatusBadge.astro";
import Button from "@/components/ui/Button.astro";
import { Image } from "astro:assets";

export function getStaticPaths() {
  return Object.keys(results).map((season) => ({ params: { season } }));
}

type Winner = {
  name: string;
  nationality?: string;
  team: string;
  car: ConstructorName;
};

const { season } = Astro.params as { season: SeasonName };
const tracksData = Object.entries(results[season]).map((track) => {
  const trackData = tracks[track[0] as TrackName];

  if (!track[1]?.results) {
    return {
      name: trackData?.name ?? "unknown",
      location: trackData?.location ?? "unknown",
      countryCode: trackData?.countryCode ?? "gb",
      date: track[1]?.date,
    };
  }

  const winners: Winner[] = (Object.keys(track[1].results) as RacerName[])
    .slice(0, 3)
    .map((id) => {
      const racer = seasonRacers[season][id];

      return {
        name: drivers[id].name,
        nationality: drivers[id].countryCode,
        team: racer?.otherTeams?.[track[0]]?.team ?? racer?.team ?? "unknown",
        car: racer?.otherTeams?.[track[0]]?.car || racer?.car || "unknown",
      };
    });

  return {
    name: trackData?.name ?? "unknown",
    location: trackData?.location ?? "unknown",
    link: `/${season}/${track[0]}`,
    countryCode: trackData?.countryCode ?? "gb",
    winners,
    date: track[1].date,
  };
});

const seasonNumber = parseInt(season.slice(1));
const seasonTitle = `Season ${seasonNumber.toString().toUpperCase()}`;
---

<Layout
  title={`Inky 500 | ${seasonTitle}`}
  description={`All the stats from ${seasonTitle} of the Inky 500 ðŸ”Ž`}
>
  <a href={withBase()} class="absolute">
    <Button variant="outline">
      <Icon.ChevronLeft size="24" aria-label="Back" />
      Seasons
    </Button>
  </a>
  <div class="relative">
    {
      seasonNumber > 1 && (
        <a
          href={withBase(`/s${seasonNumber - 1}`)}
          class="absolute top-1/2 left-0 -translate-y-1/2 hidden sm:block"
        >
          <Button variant="outline">
            <Icon.ChevronLeft size="24" aria-label="Previous Season" />
            <span>S{seasonNumber - 1}</span>
          </Button>
        </a>
      )
    }
    <h1 class="flex items-center justify-center gap-6 mt-12">
      {seasonTitle}
    </h1>
    {
      seasonNumber < Object.keys(results).length && (
        <a
          href={withBase(`/s${seasonNumber + 1}`)}
          class="absolute top-1/2 right-0 -translate-y-1/2 hidden sm:block"
        >
          <Button variant="outline">
            <span>S{seasonNumber + 1}</span>
            <Icon.ChevronRight size="24" aria-label="Next Season" />
          </Button>
        </a>
      )
    }
  </div>
  <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-3">
    {
      tracksData.map(
        (track, index) =>
          track && (
            <ConstructorCard
              title={track.name}
              index={index + 1}
              subtitle={[track.location, track.countryCode]}
              link={track.link}
              car={track.winners?.[0].car ?? "unknown"}
            >
              <div class="flex flex-col gap-2 mb-6">
                {track.winners?.map((winner, index) => (
                  <p class="flex justify-between gap-2">
                    <span class="flex items-center gap-1">
                      {index === 0 ? "ðŸ¥‡" : index === 1 ? "ðŸ¥ˆ" : "ðŸ¥‰"}
                      {winner.name}
                    </span>
                    <span class="flex items-center gap-2 text-xs">
                      {winner.team}
                      <Image
                        src={carImages[winner.car as ConstructorName]}
                        alt={winner.car ?? "unknown"}
                        class="w-6 h-6 inline-block"
                        loading="eager"
                      />
                    </span>
                  </p>
                ))}
              </div>
              <StatusBadge
                status={track.winners ? "complete" : "upcoming"}
                date={track.date}
              />
            </ConstructorCard>
          )
      )
    }
  </div>
</Layout>
