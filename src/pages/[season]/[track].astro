---
import { drivers, tracks, seasonRacers } from "@/data";

import { Image } from "astro:assets";
import Layout from "../../layouts/Layout.astro";
import { type RacerName, type SeasonName, type TrackName } from "../../types";
import { ChevronLeft, ChevronRight } from "lucide-astro";
import {
  results,
  standings,
  constructors,
  constructorsStandings,
} from "@/data";
import { carImages, withBase } from "@/utils";
import ResultsTableCard from "@/components/ResultsTableCard.astro";
import ConstructorsTableCard from "@/components/ConstructorsTableCard.astro";
import StandingsTableCard from "@/components/StandingsTableCard.astro";
import ProgressionChart from "@/components/ProgressionChart.astro";
import Button from "@/components/ui/Button.astro";
import type { ConstructorResults } from "@/data/constructorsStandings";

export function getStaticPaths() {
  const races: { season: string; track: string }[] = [];
  Object.entries(results).forEach((season) => {
    Object.entries(season[1]).forEach((track) => {
      if (track[1]?.results) {
        races.push({ season: season[0], track: track[0] });
      }
    });
  });

  return races.map(({ season, track }) => ({ params: { season, track } }));
}

const { season, track } = Astro.params as {
  season: SeasonName;
  track: TrackName;
};

const { name: trackName, countryCode: trackCountryCode } = tracks[track] ?? {};

const trackResults = results[season][track];

const trackStandings = standings[season][track];

const trackConstructors = ["s4", "s5"].includes(season)
  ? (constructorsStandings[season][track] as ConstructorResults)
  : null;

const winnerId = trackResults
  ? (Object.keys(trackResults.results ?? {}) as RacerName[])[0]
  : "unknown";
const winner = seasonRacers[season][winnerId];
const winnerName = drivers[winnerId].name;
const winnerCar = winner?.otherTeams?.[track]?.car || winner?.car || "unknown";
const carTeamColor = constructors[winnerCar]?.teamColor ?? "transparent";

const seasonTitle = `Season ${season[season.length - 1].toUpperCase()}`;

const trackIndex = Object.keys(results[season]).findIndex((t) => t === track);
const nextTrack = Object.keys(results[season])[trackIndex + 1] as TrackName;
const previousTrack = Object.keys(results[season])[trackIndex - 1] as TrackName;
---

<Layout
  title={`Inky 500 | ${tracks[track].name}, ${seasonTitle}`}
  description={`Results and standings for the Inky 500 ${seasonTitle} after ${tracks[track].name} 🏆`}
>
  <a href={withBase(`/${season}`)} class="absolute z-10">
    <Button variant="outline">
      <ChevronLeft className="h-4 w-4" aria-label="Back" />
      Season {season[season.length - 1].toUpperCase()}
    </Button>
  </a>
  <div class="relative">
    <div
      class="absolute rounded-lg w-full h-full opacity-50 -z-10"
      style={{
        background: `linear-gradient(to right, transparent, ${carTeamColor})`,
      }}
    >
    </div>
    <div class="absolute top-3 right-3 opacity-50">
      {
        winner && (
          <Image src={carImages[winnerCar]} alt={winnerCar} class="w-16 h-16" />
        )
      }
    </div>
    <div class="p-3 mb-8">
      <h1 class="mt-9">
        {trackName}
        <span class={`rounded-sm ml-3 fi fi-${trackCountryCode}`}></span>
      </h1>
      <h2 class="-mt-3">
        {seasonTitle}{trackResults?.date ? ` - ${trackResults?.date}` : ""}
      </h2>
      <h3 class="text-center text-lg">
        Winner: <span class="font-bold">{winnerName}</span>
      </h3>
    </div>
    <div class="absolute bottom-3 left-3">
      {
        results[season][previousTrack]?.results ? (
          <a href={withBase(`/${season}/${previousTrack}`)}>
            <Button variant="outline">
              <ChevronLeft className="h-4 w-4" aria-label="Previous Race" />
              <span
                class={`rounded-sm mr-1 fi fi-${tracks[previousTrack].countryCode}`}
              />
              <span class="hidden sm:block">{tracks[previousTrack].name}</span>
            </Button>
          </a>
        ) : null
      }
    </div>
    <div class="absolute bottom-3 right-3">
      {
        results[season][nextTrack]?.results ? (
          <a href={withBase(`/${season}/${nextTrack}`)}>
            <Button variant="outline">
              <span
                class={`rounded-sm ml-1 fi fi-${tracks[nextTrack].countryCode}`}
              />
              <span class="hidden sm:block">{tracks[nextTrack].name}</span>
              <ChevronRight className="h-4 w-4" aria-label="Next Race" />
            </Button>
          </a>
        ) : null
      }
    </div>
  </div>

  <div class="grid md:grid-cols-2 gap-8">
    {
      trackResults ? (
        <ResultsTableCard
          title="Results"
          season={season}
          track={track}
          data={trackResults}
          link={trackResults.data}
          className="col-span-2"
        />
      ) : null
    }
    {
      trackStandings ? (
        <StandingsTableCard
          title="Drivers' Standings"
          season={season}
          track={track}
          data={trackStandings}
          className={`${trackConstructors ? "col-span-2 lg:col-span-1" : "col-span-2"}`}
        />
      ) : null
    }
    {
      trackConstructors ? (
        <ConstructorsTableCard
          season={season}
          track={track}
          data={trackConstructors}
          trackResults={trackResults?.results ?? {}}
        />
      ) : null
    }
    <ProgressionChart season={season} track={track} />
  </div>
</Layout>
