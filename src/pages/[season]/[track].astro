---
import { drivers, tracks, seasonRacers } from "@/data";

import { Image } from "astro:assets";
import Layout from "../../layouts/Layout.astro";
import { type RacerName, type SeasonName, type TrackName } from "../../types";
import * as Icon from "@astropub/icons";
import {
  results,
  standings,
  constructors,
  constructorsStandings,
} from "@/data";
import { carImages, withBase } from "@/utils";
import Button from "@/components/ui/Button.astro";
import type { ConstructorResults } from "@/data/constructorsStandings";
import NavRow from "@/components/NavRow.svelte";
import RaceResults from "@/components/RaceResults.svelte";
import Standings from "@/components/Standings.svelte";
import Progression from "@/components/Progression.svelte";

export function getStaticPaths() {
  const races: { season: string; track: string }[] = [];
  Object.entries(results).forEach((season) => {
    Object.entries(season[1]).forEach((track) => {
      if (track[1]?.results) {
        races.push({ season: season[0], track: track[0] });
      }
    });
  });

  return races.map(({ season, track }) => ({ params: { season, track } }));
}

const { season, track } = Astro.params as {
  season: SeasonName;
  track: TrackName;
};

const { name: trackName, countryCode: trackCountryCode } = tracks[track] ?? {};

const trackResults = results[season][track];

const trackStandings = standings[season][track];

const trackConstructors = constructorsStandings[season][track];

const winnerId = trackResults
  ? (Object.keys(trackResults.results ?? {}) as RacerName[])[0]
  : "unknown";
const winner = seasonRacers[season][winnerId];
const winnerName = drivers[winnerId].name;
const winnerCar = winner?.otherTeams?.[track]?.car || winner?.car || "unknown";
const carTeamColor = constructors[winnerCar]?.teamColor ?? "transparent";
const seasonTitle = `Season ${season[season.length - 1].toUpperCase()}`;
---

<Layout
  title={`Inky 500 | ${tracks[track].name}, ${seasonTitle}`}
  description={`Results and standings for the Inky 500 ${seasonTitle} after ${tracks[track].name} 🏆`}
>
  <a href={withBase(`/${season}`)} class="absolute z-10 m-2">
    <Button variant="outline">
      <Icon.ChevronLeft size="24" aria-label="Back" />
      S{season[season.length - 1].toUpperCase()}
    </Button>
  </a>
  <div class="relative">
    <div
      class="absolute rounded-t-lg w-full h-full opacity-50 -z-10 border border-b-0"
      style={{
        background: `linear-gradient(to right, transparent, ${carTeamColor})`,
      }}
    >
    </div>
    <div class="absolute top-3 right-3 opacity-50">
      {
        winner && (
          <Image src={carImages[winnerCar]} alt={winnerCar} class="w-16 h-16" />
        )
      }
    </div>
    <div class="p-3 mb-8 z-10 relative">
      <h1 class="mt-9 z-10">
        {trackName}
        <span class="hidden sm:inline-block">
          <span class={`rounded-sm ml-3 fi fi-${trackCountryCode}`}></span>
        </span>
      </h1>
      <h2 class="-mt-3">
        {seasonTitle}{trackResults?.date ? ` - ${trackResults?.date}` : ""}
      </h2>
      <h3 class="text-center text-lg">
        Winner: <span class="font-bold">{winnerName}</span>
      </h3>
    </div>
  </div>
  <div class="grid md:grid-cols-2 gap-8">
    <NavRow client:load />
    {
      trackResults && (
        <RaceResults
          {season}
          {track}
          data={trackResults}
          link={trackResults.data}
        />
      )
    }
    <Standings
      client:load
      season={season}
      track={track}
      trackStandings={trackStandings}
      trackConstructors={trackConstructors}
      trackResults={trackResults}
    />
  </div>
</Layout>
