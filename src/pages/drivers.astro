---
import Table from "@/components/ui/table/Table.astro";
import TableBody from "@/components/ui/table/TableBody.astro";
import TableCell from "@/components/ui/table/TableCell.astro";
import TableHead from "@/components/ui/table/TableHead.astro";
import TableHeader from "@/components/ui/table/TableHeader.astro";
import TableRow from "@/components/ui/table/TableRow.astro";
import { drivers, seasonRacers, results, standings } from "@/data";
import Layout from "@/layouts/Layout.astro";
import { cn } from "@/lib/utils";
import type { ConstructorName, RacerName } from "@/types";
import { carImages } from "@/utils";
import { ArrowDownUp, ArrowUpFromLine, ArrowDownFromLine } from "lucide-astro";
import { seasonInfo } from "./index.astro";

const resultPositionSuffix = (position: number) => {
  if (!position) {
    return "N/A";
  }

  const lastDigit = (n: number) => n % 10;
  const lastTwoDigits = (n: number) => n % 100;

  if (lastDigit(position) === 1 && lastTwoDigits(position) !== 11) {
    return position + "st";
  }

  if (lastDigit(position) === 2 && lastTwoDigits(position) !== 12) {
    return position + "nd";
  }

  if (lastDigit(position) === 3 && lastTwoDigits(position) !== 13) {
    return position + "rd";
  }

  return position + "th";
};

const calculateDriverData = (driver: RacerName) => {
  let fastestLaps = 0;
  const positions = Object.values(results)
    .flatMap((seasonResults) => {
      const raceResults = Object.values(seasonResults);
      return raceResults.map((race) => {
        if (race?.fastestLap?.racerId === driver) {
          fastestLaps++;
        }

        return race === null || race.results === null
          ? -1
          : Object.keys(race.results).indexOf(driver) + 1;
      });
    })
    .filter((position) => position >= 1);

  const averageResult =
    positions.reduce((acc, position) => acc + position, 0) / positions.length;

  return {
    name: drivers[driver].name,
    teams: Array.from(
      new Set(
        Object.values(seasonRacers)
          .filter((season) => Object.keys(season).length > 0)
          .flatMap((season) => {
            return [
              ...Object.values(season[driver]?.otherTeams ?? {}).map(
                (otherTeam) => otherTeam.car
              ),
              season[driver]?.car,
            ];
          })
      )
    ).filter((team) => team !== undefined),
    points: Object.values(standings).reduce((acc, seasonStandings) => {
      const seasonStandingEntries = Object.entries(seasonStandings);

      const points =
        Object.keys(seasonStandingEntries).length === 0
          ? 0
          : (seasonStandingEntries[seasonStandingEntries.length - 1][1][driver]
              ?.points ?? 0);

      return acc + points;
    }, 0),
    wins: positions.filter((position) => position === 1).length,
    podiums: positions.filter((position) => position <= 3).length,
    fastestLaps,
    bestResult: resultPositionSuffix(positions.sort((a, b) => a - b)[0]),
    averageResult: Number.isNaN(averageResult)
      ? "N/A"
      : resultPositionSuffix(Math.round(averageResult)),
    championships: Object.entries(standings)
      .map((seasonStandings) => {
        const seasonStandingValues = Object.values(seasonStandings[1]);
        return driver ===
          Object.keys(seasonStandingValues[seasonStandingValues.length - 1])[0]
          ? seasonStandings[0].toUpperCase()
          : null;
      })
      .filter(
        (season) =>
          season &&
          seasonInfo.find((info) => info.key.toUpperCase() === season)
            ?.status === "complete"
      )
      .join(", "),
  };
};

const headers = [
  { id: "name", label: "Name", sortable: true },
  { id: "teams", label: "Teams", sortable: false },
  { id: "championships", label: "Championships", sortable: true },
  { id: "points", label: "Points", sortable: true },
  { id: "wins", label: "Wins", sortable: true },
  { id: "podiums", label: "Podiums", sortable: true },
  { id: "fastestLaps", label: "Fastest Laps", sortable: true },
  { id: "bestResult", label: "Best Result", sortable: false },
  { id: "averageResult", label: "Average Result", sortable: false },
];

const data = Object.keys(drivers)
  .filter((driver) => driver !== "unknown")
  .sort((a, b) => {
    const driverA = drivers[a as RacerName].name;
    const driverB = drivers[b as RacerName].name;

    return driverA.localeCompare(driverB);
  })
  .map((driver) => calculateDriverData(driver as RacerName));
---

<Layout
  title="Inky 500 | Drivers"
  description={`View statistics for all the drivers in the Inky 500 ðŸ›ž`}
>
  <h1>Drivers</h1>
  <div class="rounded-md border">
    <Table>
      <TableHeader>
        <TableRow>
          {
            headers.map((header, index) => (
              <TableHead
                onclick={header.sortable ? `sortTable(${index})` : undefined}
              >
                <div
                  class={cn("flex gap-1 items-center", {
                    "cursor-pointer select-none": header.sortable,
                  })}
                >
                  {header.label}
                  {header.sortable ? (
                    <>
                      <ArrowDownUp class="h-5 arrow-unsorted" />
                      <ArrowUpFromLine class="h-5 arrow-asc hidden" />
                      <ArrowDownFromLine class="h-5 arrow-desc hidden" />
                    </>
                  ) : null}
                </div>
              </TableHead>
            ))
          }
        </TableRow>
      </TableHeader>
      <TableBody>
        {
          data.map((driver) => (
            <TableRow>
              {headers.map((header) => (
                <TableCell>
                  {header.id === "teams"
                    ? driver.teams.map((team) => (
                        <img
                          class="w-4 h-4 inline-flex mr-2 last:mr-0"
                          src={carImages[team as ConstructorName].src}
                          alt={team}
                        />
                      ))
                    : driver[header.id as keyof typeof driver]}
                </TableCell>
              ))}
            </TableRow>
          ))
        }
      </TableBody>
    </Table>
  </div>
</Layout>

<script is:inline>
  let sortOrder = {};

  const sortTable = (columnIndex) => {
    const tbody = document.querySelector("tbody");
    const rows = Array.from(tbody.querySelectorAll("tr"));

    const sortedRows = rows.sort((a, b) => {
      const aText = a.cells[columnIndex].textContent.trim();
      const bText = b.cells[columnIndex].textContent.trim();

      if (!isNaN(aText) && !isNaN(bText)) {
        return sortOrder[columnIndex]
          ? Number(bText) - Number(aText)
          : Number(aText) - Number(bText);
      }

      return sortOrder[columnIndex]
        ? bText.localeCompare(aText)
        : aText.localeCompare(bText);
    });

    // Toggle sort order
    sortOrder[columnIndex] = !sortOrder[columnIndex];

    const heads = Array.from(document.querySelectorAll("th"));

    document.querySelectorAll(".arrow-unsorted").forEach((arrow) => {
      arrow.classList.remove("hidden");
    });

    document.querySelectorAll(".arrow-desc, .arrow-asc").forEach((arrow) => {
      arrow.classList.add("hidden");
    });

    if (sortOrder[columnIndex]) {
      heads[columnIndex]
        .querySelector(".arrow-unsorted")
        .classList.add("hidden");
      heads[columnIndex].querySelector(".arrow-asc").classList.remove("hidden");
      heads[columnIndex].querySelector(".arrow-desc").classList.add("hidden");
    } else {
      heads[columnIndex]
        .querySelector(".arrow-unsorted")
        .classList.add("hidden");
      heads[columnIndex].querySelector(".arrow-asc").classList.add("hidden");
      heads[columnIndex]
        .querySelector(".arrow-desc")
        .classList.remove("hidden");
    }

    // Remove existing rows
    while (tbody.firstChild) {
      tbody.removeChild(tbody.firstChild);
    }

    // Append sorted rows
    sortedRows.forEach((row) => tbody.appendChild(row));
  };
</script>
